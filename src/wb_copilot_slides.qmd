---
title: AI-powered programming with
frontpic: img/copilot.png
frontpicwidth: 70%
noshadow: noshadow
author: Marie-H√©l√®ne Burle
date: 2024-01-23
date-format: long
execute:
  error: true
  echo: true
format:
  revealjs:
    embed-resources: true
    theme: [default, ../revealjs.scss]
    logo: /img/logo_sfudrac.png
    highlight-style: ayu
    code-line-numbers: false
    template-partials:
      - ../title-slide.html
    pointer:
      color: "#b5111b"
      pointerSize: 32
    link-external-newwindow: true
    footer: <a href="wb_copilot.html"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="rgb(153, 153, 153)" class="bi bi-arrow-90deg-up" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M4.854 1.146a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L4 2.707V12.5A2.5 2.5 0 0 0 6.5 15h8a.5.5 0 0 0 0-1h-8A1.5 1.5 0 0 1 5 12.5V2.707l3.146 3.147a.5.5 0 1 0 .708-.708l-4-4z"/></svg>&nbsp;Back to webinar page</a>
    auto-stretch: false
revealjs-plugins:
  - pointer
---

# Coding in the age of generative AI

## Codex {.center}

OpenAI [Codex](https://openai.com/blog/openai-codex)‚Äîbased on GPT-3‚Äîis the model behind GitHub Copilot

All the big corporate companies are rushing to launch a growing number of similar (and not free, not open source) productivity products (e.g. [tabnine](https://www.tabnine.com/), Microsoft [Visual Studio IntelliCode](https://visualstudio.microsoft.com/services/intellicode/), Amazon [CodeWhisperer](https://aws.amazon.com/codewhisperer/))

These products generate code in a narrow context (auto-completion or transformation of natural language to code or vise-versa)

## AlphaCode 2 {.center}

Google DeepMind [AlphaCode 2](https://storage.googleapis.com/deepmind-media/AlphaCode2/AlphaCode2_Tech_Report.pdf)‚Äîbased on Gemini‚Äîstands out as a totally different (and for now totally unavailable) product generating code at the level of competitive programming (reaching the 85^th^ percentile)

Think of it as code evolution by "natural" selection:

- a very large number of code samples are generated (think "mutations")
- a filtering and scoring system selects for the best candidates (that's the selection part)

AlphaCode 2 is able to solve much more open-ended problems

## What about FOSS? {.center}

### Free

These models are large and most convenient to run on servers

&emsp;‚Üí Price of cloud service

Some self-hosted options exist. A very promising one is [Tabby](https://github.com/TabbyML/tabby). Not practical for everyone

### Open source

While these models feed from open source code, they are themselves not open source üôÅ

The open source community is trying to provide open source alternatives (e.g. [Tabby](https://github.com/TabbyML/tabby)). Despite the much more limited resources, the performance of some of these alternatives is very good

# GitHub Copilot

(not free, not open source...)

## What is [GitHub Copilot](https://github.com/features/copilot/)? {.center}

:::{.fragment}

**&nbsp;‚Üí Cloud-hosted AI programming assistant**

:::

:::{.fragment}

Developed by [GitHub](https://github.com) (Microsoft)

Running [Codex](https://openai.com/blog/openai-codex), a model by [OpenAI](https://openai.com/) derived from the [LLM](https://en.wikipedia.org/wiki/Large_language_model) GPT-3 and trained on open source code

:::

## Access {.center}

Individual or organization GitHub accounts

Requires subscription

Students, teachers, and maintainers of popular open source projects can apply for free access

## Safety {.center}

Filters are in place for offensive words, but...

Generated code comes with no guaranty of safety or quality

[A lawsuit is open against GitHub Copilot](https://githubcopilotlitigation.com/) for licenses violation

## Supported languages {.center}

Any language used in public repos

Quality of suggestions is higher for languages with lots of data

## How to use it? {.center}

:::{.fragment}

Start typing code and get autocomplete suggestions

:::

:::{.fragment}

Write comments describing what the code should do and get code generation based on context

:::

:::{.fragment}

It is easy to:

&emsp;&emsp;‚Üí accept suggestions word by word \
&emsp;&emsp;‚Üí line by line \
&emsp;&emsp;‚Üí for entire functions \
&emsp;&emsp;‚Üí cycle through different suggestions

:::

## Interface {.center}

Extensions to text editors:

&emsp;&ensp;‚Üí Visual Studio Code/Visual Studio \
&emsp;&ensp;‚Üí Vim/Neovim/Emacs \
&emsp;&ensp;‚Üí JetBrains IDEs \
&emsp;&ensp;‚Üí Azure Data Studio

# Setup

## Get a subscription {.center}

Go to your GitHub account page \
&emsp;&ensp;‚Üí Settings \
&emsp;&ensp;‚Üí Copilot \
&emsp;&ensp;‚Üí Enable

Provide free access or payment method

Set settings

## VS Code {.center}

:::{.fragment}

[Install the GitHub Copilot extension](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot)

:::

:::{.fragment}

Next suggestion: &emsp;&emsp;&emsp;&emsp;&emsp;&nbsp;`Alt+]` \
Previous suggestion: &emsp;&emsp;&emsp;&nbsp;&nbsp;`Alt+[`

Reject suggestion: &emsp;&emsp;&emsp;&emsp;&ensp;&nbsp;`Esc` \
Accept suggestion: &emsp;&emsp;&emsp;&emsp;&ensp;`Tab` \
Accept next suggested word: `Ctrl+‚Üí` &nbsp;(`Command+‚Üí` &nbsp;for macOS) \
Set your own key binding for `editor.action.inlineSuggest.acceptNextLine` to accept next suggested line

Open new tab with options: &ensp;`Ctrl+Enter`

You can also hover over suggestions

:::

## Vim/Neovim {.center}

Install [Node.js](https://nodejs.org/en/download/)

Clone <https://github.com/github/copilot.vim>

Configure:

```{.bash}
:Copilot setup
```

Enable:

```{.bash}
:Copilot enable
```

Get help:

```{.bash}
:help copilot
```

## Emacs {.center}

Install [Node.js](https://nodejs.org/en/download/)

Assuming [straight](https://github.com/radian-software/straight.el) is installed:

```{.lisp}
(straight-use-package 'editorconfig)                   ; Copilot dependency

(use-package copilot
	:straight (:host github
					 :repo "copilot-emacs/copilot.el"
					 :files ("dist" "*.el"))
	:hook (prog-mode . copilot-mode)	               ; Settings up to you
	:bind (("C-8" . copilot-complete)
		   :map copilot-completion-map
		   ("C-j" . copilot-accept-completion)
		   ("C-f" . copilot-accept-completion-by-word)
		   ("C-t" . copilot-accept-completion-by-line)
		   ("C-n" . copilot-next-completion)
		   ("C-p" . copilot-previous-completion)))
```

Login to your GitHub account (only needs to be done once): `M-x copilot-login`

# Copilot in the CLI

## What is Copilot in the CLI? {.center}

*In beta*

An extension to [GitHub CLI](https://cli.github.com/) (GitHub operations from the CLI)

&emsp;‚Üí Generate commands from natural language \
&emsp;‚Üí Generate natural language explanations from commands

Trained on data up to 2021

Lower performance for natural languages ‚â† English

[Be very careful: the command line is powerful and you can delete your data or mess up your system if you don't know what you are doing. Check commands carefully!]{.emph}

## Setup {.center}

:::{.fragment}

[Install GitHub CLI](https://github.com/cli/cli#installation)

Connect to your GitHub account:

```{.bash}
gh auth login
```

:::

:::{.fragment}

<br>
Install Copilot in the CLI:

```{.bash}
gh extension install github/gh-copilot
```

:::{.note}

Update with: `gh extension upgrade gh-copilot`

:::

:::

## Usage {.center}

Get code explanations:

```{.bash}
gh copilot explain
```

<br>
Get code from natural language:

```{.bash}
gh copilot suggest
```

## Resources {.center}

[GitHub support portal](https://support.github.com/)

[GitHub Copilot documentation](https://docs.github.com/en/copilot)

Stack Overflow [[github-copilot]](https://stackoverflow.com/questions/tagged/github-copilot) tag

[copilot.el](https://github.com/copilot-emacs/copilot.el) (unofficial Emacs plug-in)
